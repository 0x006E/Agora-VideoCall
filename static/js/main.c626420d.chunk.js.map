{"version":3,"sources":["Videos.tsx","Client.tsx","Controls.tsx","VideoCall.tsx","ChannelForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Videos","props","users","tracks","id","className","videoTrack","length","map","user","uid","useClient","createClient","mode","codec","Controls","client","setStart","setInCall","useState","video","audio","trackState","setTrackState","mute","type","a","setEnabled","ps","leaveChannel","leave","removeAllListeners","close","style","background","onClick","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","transform","VideoCall","useMicrophoneAndCameraTracks","createMicrophoneAndCameraTracks","channelName","token","setUsers","start","ready","useEffect","setClientRole","init","name","on","mediaType","subscribe","console","log","prevUsers","audioTrack","play","stop","filter","User","join","publish","ChannelForm","setChannelName","setToken","placeholder","onChange","e","target","value","preventDefault","App","inCall","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c626420d.chunk.js","sourcesContent":["import {\n  IAgoraRTCRemoteUser,\n  ICameraVideoTrack,\n  IMicrophoneAudioTrack,\n} from \"agora-rtc-sdk-ng\";\nimport { AgoraVideoPlayer } from \"agora-rtc-react\";\n\nconst Videos = (props: {\n  users: IAgoraRTCRemoteUser[];\n  tracks: [IMicrophoneAudioTrack, ICameraVideoTrack];\n}) => {\n  const { users, tracks } = props;\n\n  return (\n    <div>\n      <div id=\"videos\">\n        <AgoraVideoPlayer className=\"vid\" videoTrack={tracks[1]} />\n        {users.length > 0 &&\n          users.map((user) => {\n            if (user.videoTrack) {\n              return (\n                <AgoraVideoPlayer\n                  className=\"vid\"\n                  videoTrack={user.videoTrack}\n                  key={user.uid}\n                />\n              );\n            } else return null;\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default Videos;\n","import { createClient } from \"agora-rtc-react\";\nimport { ClientConfig } from \"agora-rtc-sdk-ng\";\n\nconst config: ClientConfig = {\n  mode: \"live\",\n  codec: \"vp8\",\n};\nconst useClient = createClient(config);\nexport default useClient;\n","import { useState } from \"react\";\nimport useClient from \"./Client\";\n\nconst Controls = (props: { tracks: any; setStart: any; setInCall: any }) => {\n  const client = useClient();\n  const { tracks, setStart, setInCall } = props;\n  const [trackState, setTrackState] = useState({ video: true, audio: true });\n\n  const mute = async (type: \"audio\" | \"video\") => {\n    if (type === \"audio\") {\n      await tracks[0].setEnabled(!trackState.audio);\n      setTrackState((ps) => {\n        return { ...ps, audio: !ps.audio };\n      });\n    } else if (type === \"video\") {\n      await tracks[1].setEnabled(!trackState.video);\n      setTrackState((ps) => {\n        return { ...ps, video: !ps.video };\n      });\n    }\n  };\n\n  const leaveChannel = async () => {\n    await client.leave();\n    client.removeAllListeners();\n    tracks[0].close();\n    tracks[1].close();\n    setStart(false);\n    setInCall(false);\n  };\n\n  return (\n    <div className=\"controls\">\n      <button\n        style={{ background: trackState.audio ? \"dodgerblue\" : \"firebrick\" }}\n        onClick={() => mute(\"audio\")}\n      >\n        <svg\n          className=\"w-6 h-6\"\n          fill=\"none\"\n          stroke=\"white\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n          />\n        </svg>\n      </button>\n      <button\n        style={{ background: \"firebrick\", transform: \"rotate(135deg)\" }}\n        onClick={() => leaveChannel()}\n      >\n        <svg\n          className=\"w-6 h-6\"\n          fill=\"none\"\n          stroke=\"white\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n          />\n        </svg>\n      </button>\n      <button\n        style={{ background: trackState.video ? \"dodgerblue\" : \"firebrick\" }}\n        onClick={() => mute(\"video\")}\n      >\n        <svg\n          className=\"w-6 h-6\"\n          fill=\"none\"\n          stroke=\"white\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n};\n\nexport default Controls;\n","import { createMicrophoneAndCameraTracks } from \"agora-rtc-react\";\nimport { IAgoraRTCRemoteUser } from \"agora-rtc-sdk-ng\";\nimport { useEffect, useState } from \"react\";\nimport Videos from \"./Videos\";\nimport Controls from \"./Controls\";\nimport useClient from \"./Client\";\n\nconst VideoCall = (props: {\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n  channelName: string;\n  token: string;\n}) => {\n  const useMicrophoneAndCameraTracks = createMicrophoneAndCameraTracks();\n  const appId: string = \"521fef790ec2421eb28596688693105f\"; //ENTER APP ID HERE\n\n  const { setInCall, channelName, token } = props;\n  const [users, setUsers] = useState<IAgoraRTCRemoteUser[]>([]);\n  const [start, setStart] = useState<boolean>(false);\n  const client = useClient();\n  const { ready, tracks } = useMicrophoneAndCameraTracks();\n\n  useEffect(() => {\n    client.setClientRole(\"host\");\n  }, []);\n\n  useEffect(() => {\n    // function to initialise the SDK\n    let init = async (name: string) => {\n      client.on(\"user-published\", async (user, mediaType) => {\n        await client.subscribe(user, mediaType);\n        console.log(\"subscribe success\");\n        if (mediaType === \"video\") {\n          setUsers((prevUsers) => {\n            return [...prevUsers, user];\n          });\n        }\n        if (mediaType === \"audio\") {\n          user.audioTrack?.play();\n        }\n      });\n\n      client.on(\"user-unpublished\", (user, type) => {\n        console.log(\"unpublished\", user, type);\n        if (type === \"audio\") {\n          user.audioTrack?.stop();\n        }\n        if (type === \"video\") {\n          setUsers((prevUsers) => {\n            return prevUsers.filter((User) => User.uid !== user.uid);\n          });\n        }\n      });\n\n      client.on(\"user-left\", (user) => {\n        console.log(\"leaving\", user);\n        setUsers((prevUsers) => {\n          return prevUsers.filter((User) => User.uid !== user.uid);\n        });\n      });\n\n      await client.join(appId, name, token, null);\n      if (tracks) await client.publish([tracks[0], tracks[1]]);\n      setStart(true);\n    };\n\n    if (ready && tracks) {\n      console.log(\"init ready\");\n      init(channelName);\n    }\n  }, [channelName, client, ready, tracks, token]);\n\n  return (\n    <div className=\"App\">\n      {ready && tracks && (\n        <Controls tracks={tracks} setStart={setStart} setInCall={setInCall} />\n      )}\n      {start && tracks && <Videos users={users} tracks={tracks} />}\n    </div>\n  );\n};\nexport default VideoCall;\n","const ChannelForm = (props: {\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n  setChannelName: React.Dispatch<React.SetStateAction<string>>;\n  setToken: React.Dispatch<React.SetStateAction<string>>;\n}) => {\n  const { setInCall, setChannelName, setToken } = props;\n\n  return (\n    <form className=\"join\">\n      <input\n        type=\"text\"\n        placeholder=\"Enter Channel Name\"\n        onChange={(e) => setChannelName(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Enter Channel Token\"\n        onChange={(e) => setToken(e.target.value)}\n      />\n      <button\n        onClick={(e) => {\n          e.preventDefault();\n          setInCall(true);\n        }}\n      >\n        Join\n      </button>\n    </form>\n  );\n};\nexport default ChannelForm;\n","import { useState } from \"react\";\nimport VideoCall from \"./VideoCall\";\nimport ChannelForm from \"./ChannelForm\";\n\nconst App = () => {\n  const [inCall, setInCall] = useState(false);\n  const [channelName, setChannelName] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  return (\n    <div>\n      <h1 className=\"heading\">Agora Video Call Demo</h1>\n      {inCall ? (\n        <VideoCall\n          setInCall={setInCall}\n          channelName={channelName}\n          token={token}\n        />\n      ) : (\n        <ChannelForm\n          setInCall={setInCall}\n          setChannelName={setChannelName}\n          setToken={setToken}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}